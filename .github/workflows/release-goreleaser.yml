name: Release (goreleaser)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Release via goreleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-mod-${{ hashFiles('src/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Prefetch Go modules
        working-directory: src
        run: |
          set -eux
          go version
          go mod download

      - name: Install TinyGo (manual)
        run: |
          set -eux
          TGV=0.39.0
          ARCH=amd64
          URL="https://github.com/tinygo-org/tinygo/releases/download/v${TGV}/tinygo${TGV}.linux-${ARCH}.tar.gz"
          echo "Downloading TinyGo from $URL"
          curl -fsSL "$URL" -o /tmp/tinygo.tar.gz
          sudo tar -C /usr/local -xzf /tmp/tinygo.tar.gz
          sudo ln -sf /usr/local/tinygo/bin/tinygo /usr/local/bin/tinygo
          tinygo version

      - name: Build plugin.wasm
        # build the wasm artifact from src; output plugin.wasm at repo root
        working-directory: src
        run: |
          set -eux
          tinygo build -o ../plugin.wasm -scheduler=none --no-debug -target=wasi .

      - name: List plugin.wasm
        run: |
          set -eux
          echo 'Verifying plugin.wasm was produced'
          ls -la plugin.wasm || true
          if [ -f plugin.wasm ]; then
            echo 'plugin.wasm exists'
          else
            echo 'plugin.wasm NOT found'
            exit 1
          fi

      - name: Clean dist (if any)
        run: |
          rm -rf dist || true

      - name: Check plugin artifact
        run: |
          set -eux
          echo "Checking for plugin artifacts"
          ls -la LICENSE .traefik.yml plugin.wasm
          if [ ! -f plugin.wasm ]; then
            echo "plugin.wasm missing â€” build failed or file path wrong"
            exit 1
          fi

      - name: Run goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create plugin zip and checksum
        id: create_zip
        run: |
          set -eux
          TAG=${GITHUB_REF#refs/tags/}
          PROJECT_NAME=${GITHUB_REPOSITORY#*/}
          VERSION=${TAG#v}
          ZIP_NAME="${PROJECT_NAME}_v${VERSION}.zip"
          CHECKSUM_NAME="${PROJECT_NAME}_${VERSION}_checksums.txt"
          # Create zip containing only the plugin artifacts
          zip -j "$ZIP_NAME" LICENSE .traefik.yml plugin.wasm
          # Sanity check: ensure no test files or test directories are included in the release zip
          if unzip -l "$ZIP_NAME" | grep -E "(^|/)(tests?/|.*_test\.go$)" >/dev/null; then
            echo "ERROR: zip contains test files or test directories; aborting"
            unzip -l "$ZIP_NAME"
            exit 1
          fi
          # Create sha256 checksum file in the same layout GoReleaser uses
          sha256sum "$ZIP_NAME" > "$CHECKSUM_NAME"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "CHECKSUM_NAME=$CHECKSUM_NAME" >> $GITHUB_ENV
          # Export values as step outputs for use by later actions
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "checksum_name=$CHECKSUM_NAME" >> $GITHUB_OUTPUT

      - name: Get release upload URL
        id: get_upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          TAG=${GITHUB_REF#refs/tags/}
          # Query the release created by goreleaser and export its upload_url (stripped)
          RELEASE_JSON=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG}")
          RELEASE_ID=$(echo "$RELEASE_JSON" | jq -r .id)
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Release not found for tag ${TAG}; aborting"
            echo "Response: $RELEASE_JSON"
            exit 1
          fi
          UPLOAD_URL=$(echo "$RELEASE_JSON" | jq -r .upload_url | sed -e 's/{?name,label}//')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload plugin zip to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ${{ steps.create_zip.outputs.zip_name }}
          asset_name: ${{ steps.create_zip.outputs.zip_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checksum to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ${{ steps.create_zip.outputs.checksum_name }}
          asset_name: ${{ steps.create_zip.outputs.checksum_name }}
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
