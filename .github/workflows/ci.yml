name: CI (Traefik WASM plugin)

on:
  push:
    branches: [ main, master ]
    tags:    [ 'v*' ]
  pull_request:

permissions:
  contents: write   # needed for releases on tags

env:
  TINYGO_VERSION: "0.34.0"
  TRAEFIK_IMAGE:  "traefik:v3.3"

jobs:
  deps:
    name: Resolve Go deps (go.mod/go.sum)
    runs-on: ubuntu-latest
    container:
      image: golang:1.22-bookworm
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: Go version
        run: /usr/local/go/bin/go version
      - name: go mod tidy
        working-directory: src
        run: /usr/local/go/bin/go mod tidy
      # Optional: vendor for hermetic builds
      # - name: go mod vendor
      #   working-directory: src
      #   run: /usr/local/go/bin/go mod vendor

  lint:
    name: Lint (gofmt/govet)
    runs-on: ubuntu-latest
    needs: [deps]
    container:
      image: golang:1.22-bookworm
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: go fmt check
        working-directory: src
        run: |
          /usr/local/go/bin/go fmt ./...
          test -z "$(/usr/local/go/bin/gofmt -l . | tee /dev/stderr)"
      - name: go vet (non-fatal)
        working-directory: src
        run: /usr/local/go/bin/go vet ./... || true

  build-wasm:
    name: Build plugin.wasm (TinyGo)
    runs-on: ubuntu-latest
    needs: [deps]
    container:
      image: tinygo/tinygo:0.34.0
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: TinyGo version
        run: tinygo version
      - name: Build WASM
        run: tinygo build -o plugin.wasm -scheduler=none --no-debug -target=wasi ./src
      - name: Upload plugin.wasm
        uses: actions/upload-artifact@v4
        with:
          name: plugin.wasm
          path: plugin.wasm

  integration-test:
    name: Integration Test (Traefik + whoami)
    runs-on: ubuntu-latest
    needs: [build-wasm]
    env:
      HTTP_BASE: http://localhost:80
    steps:
      - uses: actions/checkout@v4

      - name: Download plugin.wasm
        uses: actions/download-artifact@v4
        with:
          name: plugin.wasm
          path: .

      - name: Derive module path from src/go.mod
        id: mod
        run: |
          MOD=$(sed -n 's/^module[[:space:]]\+//p' src/go.mod)
          echo "module=$MOD"
          echo "MODULE=$MOD" >> $GITHUB_OUTPUT

      - name: Prepare plugins-local layout
        run: |
          PKG_DIR="plugins-local/src/${{ steps.mod.outputs.MODULE }}"
          mkdir -p "$PKG_DIR"
          cp plugin.wasm .traefik.yml "$PKG_DIR/"
          echo "Laid out plugin at: $PKG_DIR"
          ls -R plugins-local

      - name: Ensure moduleName matches static config
        run: |
          sed -i "s#moduleName: .*#moduleName: ${{ steps.mod.outputs.MODULE }}#g" traefik/traefik.yml || true

      - name: Use test ports override
        run: |
          cat > docker-compose.test.yml <<'YAML'
          version: "3.9"
          services:
            traefik:
              ports:
                - "8081:80"
                - "8082:8080"
          YAML

      - name: Start stack
        run: |
          docker compose -f docker-compose.yml up -d
          echo "Waiting for Traefik..."
          for i in {1..30}; do
            curl -fsS "${HTTP_BASE}/" >/dev/null 2>&1 && break
            sleep 1
            if [ $i -eq 30 ]; then echo "Traefik not ready"; docker compose logs --no-color; exit 1; fi
          done

      - name: Run checks (401/200)
        run: |
          set -e
          # 401 when missing Token
          c=$(curl -s -o /dev/null -w "%{http_code}" "${HTTP_BASE}/");          test "$c" = "401" || (echo "expected 401 missing, got $c" && exit 1)
          # 401 when invalid Token
          c=$(curl -s -o /dev/null -w "%{http_code}" "${HTTP_BASE}/?Token=no"); test "$c" = "401" || (echo "expected 401 invalid, got $c" && exit 1)
          # 200 when allowed Token (must exist in traefik/dynamic.yml -> allowedValues)
          c=$(curl -s -o /dev/null -w "%{http_code}" "${HTTP_BASE}/?Token=my-secret"); test "$c" = "200" || (echo "expected 200 valid, got $c" && exit 1)
          echo "Integration OK ✅"

      - name: Logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.test.yml logs --no-color

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.test.yml down -v

  package-local-bundle:
    name: Package plugins-local bundle
    runs-on: ubuntu-latest
    needs: [build-wasm]
    container:
      image: alpine:3.20
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: Download plugin.wasm
        uses: actions/download-artifact@v4
        with:
          name: plugin.wasm
          path: .
      - name: Derive module path
        id: mod
        run: |
          MOD=$(sed -n 's/^module[[:space:]]\+//p' src/go.mod)
          echo "MODULE=$MOD" >> $GITHUB_OUTPUT
      - name: Create bundle
        run: |
          PKG_DIR="dist/plugins-local/src/${{ steps.mod.outputs.MODULE }}"
          mkdir -p "$PKG_DIR"
          cp plugin.wasm .traefik.yml "$PKG_DIR/"
          tar -C dist -czf plugin-local-bundle.tgz plugins-local
          ls -lh plugin-local-bundle.tgz
      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: plugin-local-bundle.tgz
          path: plugin-local-bundle.tgz

  release:
    name: Release (tagged)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [package-local-bundle]
    container:
      image: alpine:3.20
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: Download bundle
        uses: actions/download-artifact@v4
        with:
          name: plugin-local-bundle.tgz
          path: .
      - name: Checksums
        run: sha256sum plugin-local-bundle.tgz > plugin-local-bundle.tgz.sha256
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            plugin-local-bundle.tgz
            plugin-local-bundle.tgz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
